# -*- coding: utf-8 -*-
"""Salary_Estimation_using_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fUsuRAE2REf83O1CIbvGI_mrf-SPE5kM
"""

import pandas as pd #used for loading dataset
import numpy as np #used to perform array array

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv("salary.csv")

print(dataset.shape)
print(dataset.head(5))

income_set = set(dataset['income'])
dataset['income'] = dataset['income'].map({'<=50K': 0, '>50K': 1}).astype(int)
print(dataset.head)

x = dataset.iloc[:, :-1].values
x

y = dataset.iloc[:, -1].values
y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train) 
x_test = sc.transform(x_test)

error = []
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

#calculating error for k values between 0 to 40
for i in range(1, 40):
  model = KNeighborsClassifier(n_neighbors = i)
  model.fit(x_train, y_train)
  pred_i = model.predict(x_test)
  error.append(np.mean(pred_i != y_test))

plt.figure(figsize=(12, 6))
plt.plot(range(1, 40), error, color ='black', linestyle = 'dashed', marker = 'o', markerfacecolor='yellow', markersize = 10)
plt.title("Error rate of k value")
plt.xlabel('K Value')
plt.ylabel('Mean Error')

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors = 2, metric = 'minkowski', p = 2)
model.fit(x_train, y_train)

age = int(input("Enter New Employee's Age: "))
edu = int(input("Enter New Employee's Education: "))
cg = int(input("Enter New Employee's Central gain: "))
wh = int(input("Enter New Employee's Hour's per week: "))
newEmp = [[age, edu, cg, wh]]
result = model.predict(sc.transform(newEmp))
print(result)

if result == 1:
  print("Employee might get salary above 50k")
else:
  print("Employee might not get salary above 50k")

y_pred = model.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Evaluating model"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)

print("Confusion Matrix: ")
print(cm)

print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_pred)*100))

"""Reciever opearating (ROC Curve)"""

from sklearn.metrics import roc_auc_score, roc_curve
 import matplotlib.pyplot as plt

 nsprobablity = [0 for _ in range(len(y_test))]
 knnprobablity = model.predict_proba(x_test)

 #probablities for positive outcome only
 knnprobablity = knnprobablity[:, 1]
 
 #calculate scores
 nsAUC = roc_auc_score(y_test, nsprobablity)
 knnAUC = roc_auc_score(y_test, knnprobablity)

 #summarize accuracy score
 print('no Skill : ROC AUC = %.3f' % (nsAUC*100))
 print('KNN Skill : ROC AUC = %.3f' % (knnAUC*100))

 #calculate roc curve
 nsFP,nsTP, _ = roc_curve(y_test, nsprobablity)
 knnFP,knnTP, _ = roc_curve(y_test, knnprobablity)

 #plot roc curve for the model
 plt.plot(nsFP,nsTP, linestyle = '--', label = 'No skill')
plt.plot(knnFP,knnTP, marker = '*', label = 'KNN')
plt.xlabel('False positive Rate')
plt.ylabel('True positive Rate')

#show legend()
plt.legend()
plt.show()

"""Cross Validation score"""

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
kfold = KFold(n_splits=10, shuffle=True)
result = cross_val_score(model, x, y, cv=kfold)
print("CROSS VALIDATION SCORE: %.2f%%" % (result.mean()*100.0))

"""Stratifield K-Fold cross validation"""

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
skfold = StratifiedKFold(n_splits=3, shuffle=True)
model_skfold = KNeighborsClassifier()
results_skfold = cross_val_score(model_skfold, x, y, cv=skfold)
print("STRATIFIELD K-FOLD SCORE: %.2f%%" % (results_skfold.mean()*100.0))

"""CAP curve (Cumulative accuracy profile)"""

total = len(y_test)
print(total)
class_1_count = np.sum(y_test)
print(class_1_count)
class_0_count = total - class_1_count
plt.plot([0, total], [0, class_1_count], c = 'r', linestyle = '--', label = 'Random Model')

plt.plot([0, class_1_count, total], 
         [0, class_1_count, class_1_count], 
         c = 'grey', 
         linewidth = 2, 
         label = 'Perfect Model')

probs = model.predict_proba(x_test)
probs = probs[:, 1]
model_y = [y for _, y in sorted(zip(probs, y_test), reverse = True)]
y_values = np.append([0], np.cumsum(model_y))
x_values = np.arange(0, total + 1)

plt.plot(x_values, 
         y_values, 
         c = 'b', 
         label = 'KNN Classifier', 
         linewidth = 4)

index = int((50*total / 100))

#50% Vertical line for x-axis
plt.plot([index, index], [0, y_values[index]], c ='g', linestyle = '--')

## Horizontal line to y-axis from prediction model
plt.plot([0, index], [y_values[index], y_values[index]], c = 'g', linestyle = '--')

class_1_observed = y_values[index] * 100 / max(y_values)
plt.xlabel('Total observations')
plt.ylabel('Class 1 observations')
plt.title('Cumulative Accuracy Profile')
plt.legend(loc = 'lower right')

